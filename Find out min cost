import java.io.*;
import java.util.*;

public class Solution {
    public static void main(String[] args) {
        
        Scanner input = new Scanner(System.in);

        //These  arrays are possible magic square for range [1-9]

        int[][][] possibleMagicSquare = {
            {{8, 1, 6}, {3, 5, 7}, {4, 9, 2}},

            {{6, 1, 8}, {7, 5, 3}, {2, 9, 4}},

            {{4, 9, 2}, {3, 5, 7}, {8, 1, 6}},

            {{2, 9, 4}, {7, 5, 3}, {6, 1, 8}},

            {{8, 3, 4}, {1, 5, 9}, {6, 7, 2}},

            {{4, 3, 8}, {9, 5, 1}, {2, 7, 6}},

            {{6, 7, 2}, {1, 5, 9}, {8, 3, 4}},

            {{2, 7, 6}, {9, 5, 1}, {4, 3, 8}},
        };

        int[][] given = new int[3][3];
        for (int i = 0; i < 3; i++) 
        {
            for (int j = 0; j < 3; j++)
                given[i][j] = input.nextInt();
        }

        //compare the input with 8 magic square to find min cost.

        int minCost = Integer.MAX_VALUE;
        for (int permutation = 0; permutation < 8; permutation++) 
        {
            int permutationCost = 0;
            for (int i = 0; i < 3; i++) 
            {
                for (int j = 0; j < 3; j++)
                    permutationCost += Math.abs(given[i][j] - possibleMagicSquare[permutation][i][j]);
            }
            minCost = Math.min(minCost, permutationCost);
        }
        System.out.println(minCost);
    }
}
